Maximum integer with while loop = 2147483647
Max integer with for loop: 2147483647
Max integer with do while loop: 2147483647
Max integer from limits.h: 2147483647

Min integer with while loop= -2147483648
Min integer with for loop: -2147483648
Min integer with do while loop: -2147483648
Min integer from limits.h: -2147483648

min abs double while loop: 2.22045e-16
 DBL_EPSILON= 2.22045e-16
min abs double for loop= 2.22045e-16
min abs double do while loop= 2.22045e-16

Min abs float while loop: 1.19209e-07
FLT_EPSILON=1.19209e-07
min abs double for loop= 1.19209e-07
min abs double do while loop= 1.19209e-07

Min abs long double : 1.0842e-19
LDBL_EPSILON=1.0842e-19
min abs double for loop= 1.0842e-19
min abs double do while loop= 1.0842e-19

sum up: 15.403683
sum down: 18.807919
The difference comes from when about due to 1/INT_MAX~1e-9<FLT_EPSILON. so when sum down is done the small numbers are calculated first, to which bigger and bigger numbers are added, thus keeping precicion and here getting to the bigger number. for sum up, the loss of percision causes the smaller number.

sum up: inf
sum down: 21.3716
Here 1/INT_MAX>DBL_EPSILON, so no loss of precision either way.for:
 a=5
 b=6
 tau=1
 epsilon=2
are they equal: 1
for:
 a=5
 b=7
 tau=1
 epsilon=2
are they equal: 1
for:
 a=5
 b=7
 tau=0
 epsilon=0
are they equal: 0
