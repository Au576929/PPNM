#include <math.h>
#include <stdio.h>
#include <stdlib.h>

void rkstep23g ( //This stepper will function in with pretty much any function in place of g, used for part c
	void g(int n, double x, double* y, double* dydx),
	int n,
	double x,
	double* yx,
	double h,
	double* yh,
	double* dy
){
double k1[n];
double k2[n];
double k3[n];
double k4[n]; 

double yt[n];

g(n,x,yx,k1);
for (int i=0; i<n; i++){
	yt[i]=yx[i]+1.0/2*k1[i]*h;
}
g(n,x+1.0/2*h,yt,k2);
for (int i=0; i<n; i++){
	yt[i]=yx[i]+3.0/4*k2[i]*h;
}
g(n,x+3.0/4*h,yt,k3);
for(int i=0;i<n;i++){
	yh[i]=yx[i]+(2.0/9*k1[i]+1.0/3*k2[i]+4.0/9*k3[i])*h;
}
g(n,x+h,yh,k4);
for (int i=0;i<n;i++){
	yt[i]=yx[i]+(7.0/24*k1[1]+1.0/4*k2[i]+1.0/3*k3[i]+1.0/8*k4[i])*h;
	dy[i]=yh[i]-yt[i];
}
}

void rkstep23Tc ( //this stepper was created in order to pass the variables Tc,Tr and N to the function f
        void f(int n, double x, double* y, double* dydx,double Tc, double Tr,double N),
        int n,
        double x,
        double* yx,
        double h,
        double* yh,
        double* dy,
	double Tc,
	double Tr,
	double N
){
double k1[n];
double k2[n];
double k3[n];
double k4[n]; 

double yt[n];

f(n,x,yx,k1,Tc,Tr,N);
for (int i=0; i<n; i++){
        yt[i]=yx[i]+1./2*k1[i]*h;
}
f(n,x+1./2*h,yt,k2,Tc,Tr,N);
for (int i=0; i<n; i++){
        yt[i]=yx[i]+3./4*k2[i]*h;
}
f(n,x+3./4*h,yt,k3,Tc,Tr,N);
for(int i=0;i<n;i++){
        yh[i]=yx[i]+(2./9*k1[i]+1./3*k2[i]+4./9*k3[i])*h;
}
f(n,x+h,yh,k4,Tc,Tr,N);
for (int i=0;i<n;i++){
        yt[i]=yx[i]+(7./24*k1[1]+1./4*k2[i]+1./3*k3[i]+1./8*k4[i])*h;
        dy[i]=yh[i]-yt[i];
}
}



void f(int n, double x, double* y, double* dydx,double Tc,double Tr, double N){
dydx[0]=-y[1]*y[0]/(N*Tc);
dydx[1]=y[1]*y[0]/(N*Tc)-y[1]/Tr;
dydx[2]=y[1]/Tr;
}


void g(int n, double x, double* y, double* dydx){

double r12=(y[0]-y[4])*(y[0]-y[4])+(y[1]-y[5])*(y[1]-y[5]); //distance from particle 1 to particle 2 SQUARED!
double r13=(y[0]-y[8])*(y[0]-y[8])+(y[1]-y[9])*(y[1]-y[9]); //---------//----------- 1 -----//---- 3 ---//---!
double r23=(y[4]-y[8])*(y[4]-y[8])+(y[5]-y[9])*(y[5]-y[9]); // you know

//acceleration on particle 1 along x
dydx[2]=-(y[0]-y[4])/pow(r12,3.0/2)-(y[0]-y[8])/pow(r13,3.0/2);
//acceleration on particle 1 along y
dydx[3]=-(y[1]-y[5])/pow(r12,3.0/2)-(y[1]-y[9])/pow(r13,3.0/2);

//acceleration on particle 2 along x
dydx[6]=-(y[4]-y[0])/pow(r12,3.0/2)-(y[4]-y[8])/pow(r23,3.0/2);
//acceleration on particle 2 along y
dydx[7]=-(y[5]-y[1])/pow(r12,3.0/2)-(y[5]-y[9])/pow(r23,3.0/2);

//acceleration on particle 3 along x
dydx[10]=-(y[8]-y[0])/pow(r13,3.0/2)-(y[8]-y[4])/pow(r23,3.0/2);
//acceleration on particle 3 along y
dydx[11]=-(y[9]-y[1])/pow(r13,3.0/2)-(y[9]-y[5])/pow(r23,3.0/2);


//velocity of particle 1 along x
dydx[0]=y[2];
//velocity of particle 1 along y
dydx[1]=y[3];


//velocity of particle 2 along x
dydx[4]=y[6];
//velocity of particle 2 along y
dydx[5]=y[7];

//velocity of particle 3 along x
dydx[8]=y[10];
//velocity of particle 3 along y
dydx[9]=y[11];


}




/*void f(int n, double x, double* y, double* dydx){
dydx[0]=y[1];
dydx[1]=-y[0];
}*/



void driver ( //this driver passes Tc, Tr, and N so therefore wont be used for part c
	void f(int n, double x, double* y, double* dydx,double Tc,double Tr, double N),
	int n,
	double a,
	double* ya,
	double b,
	double h,
	double acc,
	double eps,
	double Tc,
	double Tr,
	double N,
	char* name
){
double x=a;
double* y=ya;

double s, normy, yh[n], dy[n], tol, err;
FILE* list_stream=fopen(name,"w");

while (x<b){ /*if b<a in your is of interest, it is simple to change x->-x in diff lign and then use that instead  */

	if(x+h>b){
		h=b-x;
	}

	rkstep23Tc(f,n,x,y,h,yh,dy,Tc,Tr,N);
	s=0;
	for (int i=0;i<n;i++){
		s+=dy[i]*dy[i];
	}
	err=sqrt(s);
	s=0;
	for (int i=0;i<n;i++){
        	s+=yh[i]*yh[i];
	}
	normy=sqrt(s);

	tol=(normy*eps+acc)*sqrt(h/(b-a));
	if (err<tol){
		x+=h;
		y=yh;
		fprintf(list_stream,"%10g ",x);
		for (int i=0;i<n;i++){
			fprintf(list_stream,"%10g ",yh[i]);
		}
		fprintf(list_stream,"\n");
	} 
        h*=pow(tol/err,0.25)*0.95;
 
}
}




void driverg ( 
        void g(int n, double x, double* y, double* dydx),
        int n,
        double a,
        double* ya,
        double b,
        double h,
        double acc,
        double eps,
        char* name
){
double x=a;
double* y=ya;

double s, normy, yh[n], dy[n], tol, err;
FILE* list_stream=fopen(name,"w");

while (x<b){ /*if b<a in your is of interest, it is simple to change x->-x in diff lign and then use that instead  */

        if(x+h>b){
                h=b-x;
        }

        rkstep23g(g,n,x,y,h,yh,dy);
        s=0;
        for (int i=0;i<n;i++){
                s+=dy[i]*dy[i];
        }
        err=sqrt(s);
        s=0;
        for (int i=0;i<n;i++){
                s+=yh[i]*yh[i];
        }
        normy=sqrt(s);

        tol=(normy*eps+acc)*sqrt(h/(b-a));
        if (err<tol){
                x+=h;
                y=yh;
                fprintf(list_stream,"%10g ",x);
                for (int i=0;i<n;i++){
                        fprintf(list_stream,"%10g ",yh[i]);
                }
                fprintf(list_stream,"\n");
        } 
        h*=pow(tol/err,0.25)*0.95;
 
}
}

